#!/usr/bin/env python

from ConfigParser import SafeConfigParser
import os.path
import requests
import argparse

from fabric.api import run, env
from fabric.context_managers import settings, hide

def get_user_info(fabric_settings, user, desired_info):
  command = fabric_settings['zmprov_path'] + ' ga '+ user
  for i in desired_info:
    command = command + ' ' + i
  output = make_fabric_call(fabric_settings, command)
  return output

def get_account_list(fabric_settings, username=None):
  command = fabric_settings['zmprov_path'] + ' -l  gaa'
  output = make_fabric_call(fabric_settings, command)
  return output

def get_all_user_info(fabric_settings, username=None):
  return

def get_inactive_accounts(fabric_settings):
  command = fabric_settings['zmaccts_path']
  output = make_fabric_call(fabric_settings, command)
  return output

def get_usernames(fabric_settings):
  output = get_account_list(fabric_settings).splitlines()
  for i in output:
    output[output.index(i)] = i.split('@')[0]
  return output

def save_usernames(fabric_settings):
  return save('usernames', get_usernames(fabric_settings))

def save_account_list(fabric_settings, username=None):
  return save('accounts',get_account_list(fabric_settings))

def make_fabric_call(fabric_settings, command):
  with settings(
    hide('stdout','running'),
    host_string = fabric_settings['server'], user = fabric_settings['zimbra_user'],
    key_filename = os.path.expanduser(fabric_settings['keypath'])
  ):
    output = run(command)
  return output

def read_config(section):
  parser = SafeConfigParser()
  parser.read(os.path.expanduser('~/.wander.cfg'))
  return parser.items(section)

def make_request(settings, username, data_type):
  base_url = settings['server'] + ':' + settings['port'] + '/home/' + username
  if data_type == 'contacts':
    url = base_url + '/contacts'
  elif data_type == 'calendar':
    url = base_url + '/calendar'
  else:
    return
  r = requests.get(url, auth=(settings['username'],settings['password']))
  content = r.content
  return content

def save(data_type, content, username=None):
  if data_type == 'contacts' and username:
    filename = username+'_contacts.csv'
  elif data_type == 'calendar' and username:
    filename = username+'_calendar.ics'
  elif data_type == 'accounts':
    filename = 'accounts.txt'
  elif data_type == 'usernames':
    filename = 'usernames.txt'
    content = "\n".join(content)
  else:
    return
  f = open(filename,'w')
  f.write(content)
  f.close()
  return

def get_user_contacts(settings, username=None):
  data_type = 'contacts'
  if username:
    content = make_request(settings, username, data_type)
    save(data_type, content, username)
    return
  else:
    print "OH NOES"
    return

def get_user_calendar(settings, username=None):
  data_type = 'calendar'
  if username:
    content = make_request(settings, username, data_type)
    save(data_type, content, username)
    return
  else:
    print "OH NOES"
    return

def parse_commands(zimbra_settings, fabric_settings):
  parser = argparse.ArgumentParser()
  subparsers = parser.add_subparsers()

  parser_contacts = subparsers.add_parser('contacts')
  parser_contacts.add_argument('user', nargs='?', default=None)
  parser_contacts.set_defaults(func=get_user_contacts, settings=zimbra_settings)

  parser_calendar = subparsers.add_parser('calendar')
  parser_calendar.add_argument('user', nargs='?', default=None)
  parser_calendar.set_defaults(func=get_user_calendar, settings=zimbra_settings)

  parser_accounts = subparsers.add_parser('accounts')
  parser_accounts.set_defaults(func=save_account_list, settings=fabric_settings, user=None)

  args = parser.parse_args()
  args.func(args.settings, args.user)
  return

if  __name__ == "__main__":
  zimbra_settings = dict(read_config('zimbra'))
  fabric_settings = dict(read_config('fabric'))
  parse_commands(zimbra_settings, fabric_settings)
  #out = get_user_info(fabric_settings, 'kharriss', ['givenName','sn'])
  #out = get_account_list(fabric_settings)
  #print get_inactive_accounts(fabric_settings)
  #save_usernames(fabric_settings)
